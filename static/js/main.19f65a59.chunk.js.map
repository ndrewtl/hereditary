{"version":3,"sources":["utils/util.ts","components/Tree.tsx","components/Navigation.tsx","components/ConfigEditor.tsx","components/App.tsx","index.tsx"],"names":["url","a","fetch","response","text","load","PersonSVG","person","radius","reignColors","name","country","reign","x","y","id","useMemo","replaceAll","r","cx","cy","href","join","process","height","clipPath","stroke","none","strokeWidth","fillOpacity","textAnchor","strokeOpacity","fill","fontSize","PersonLinkSVG","link","x1","source","y1","x2","target","y2","Tree","data","people","colors","config","width","countries","before","since","useState","forceSimulation","stop","simulation","nodes","setNodes","links","setLinks","drag","setDrag","useEffect","selectedPeople","filter","born","has","computedLinks","flatMap","result","mother","find","p","push","father","force","forceManyBody","strength","forceLink","d","earliestYear","latestYear","alpha","forEach","node","position","vy","initialize","inputNodes","Math","min","map","max","newVal","ageOrdering","forceX","alphaTarget","restart","on","style","border","viewBox","onMouseMove","e","offsetX","offsetY","fx","clientX","fy","clientY","onMouseUp","onMouseLeave","onMouseDown","cursor","Navigation","Navbar","Container","Nav","Brand","Text","version","Link","repository","CountriesEditor","countryList","selectedCountries","setSelectedCountries","Row","Form","Label","Check","type","label","checked","onChange","delete","add","Set","DatesEditor","setBefore","setSince","Col","InputGroup","hasValidation","Control","value","event","Number","undefined","ConfigEditor","submitConfig","uniq","sort","Button","variant","onClick","defaultConfig","App","setConfig","basename","promiseFn","fetchData","Fulfilled","Accordion","marginBottom","defaultActiveKey","Item","eventKey","Header","Body","Loading","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4ZAuDO,WAAyBA,GAAzB,iBAAAC,EAAA,sEACkBC,MAAMF,GADxB,cACCG,EADD,gBAEcA,EAASC,OAFvB,cAECA,EAFD,gBAGQC,YAAKD,GAHb,oF,yCCpCP,SAASE,EAAT,GAAqE,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,YAEjCC,EACEH,EADFG,KAAMC,EACJJ,EADII,QAASC,EACbL,EADaK,MAAOC,EACpBN,EADoBM,EAAGC,EACvBP,EADuBO,EAErBC,EAAKC,mBAAQ,kBAAMN,EAAKO,WAAW,OAAQ,OAAM,IAEvD,OACE,8BACE,0BAAUF,GAAE,UAAKA,EAAL,SAAZ,SACE,wBAAQG,EAAGV,EAAQW,GAAIN,EAAIO,GAAIN,MAEjC,uBAEEO,KAAMC,eAAKC,cAAD,gBAAkCZ,EAAlC,SACVE,EAAGA,EAAK,EAAIL,EACZM,EAAGA,EAAKN,EACRgB,OAAiB,EAAThB,EACRiB,SAAQ,eAAUV,EAAV,WALHA,GAOP,wBACEG,EAAGV,EACHW,GAAIN,EACJO,GAAIN,EACJY,OAAQd,EAAQH,EAAYG,GAASH,EAAYkB,KACjDC,YAAY,MACZC,YAAY,IACZd,GAAIA,IAEN,sBACEF,EAAGA,EACHC,EAAGA,EAAM,IAAMN,EACfsB,WAAW,SACXJ,OAAO,OACPE,YAAY,MACZG,cAAc,MACdC,KAAK,OACLC,SAAS,OARX,SAUGvB,OAST,SAASwB,EAAT,GAAsD,IAA7BC,EAA4B,EAA5BA,KACvB,OACE,sBACEC,GAAKD,EAAKE,OAAkBxB,EAC5ByB,GAAKH,EAAKE,OAAkBvB,EAC5ByB,GAAKJ,EAAKK,OAAkB3B,EAC5B4B,GAAKN,EAAKK,OAAkB1B,EAC5BY,OAAO,OACPK,cAAc,MACdH,YAAY,OAyIHc,MA/Hf,YAGe,IAAD,IAFZC,KAAQC,EAEI,EAFJA,OAAQC,EAEJ,EAFIA,OAEJ,IADZC,OAAUC,EACE,EADFA,MAAOvB,EACL,EADKA,OAAQhB,EACb,EADaA,OAAQwC,EACrB,EADqBA,UAAWC,EAChC,EADgCA,OAAQC,EACxC,EADwCA,MAEpD,EAAqBC,mBAASC,cAA0BC,QAAjDC,EAAP,oBAEA,EAA0BH,mBAAmB,IAA7C,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAA0BL,mBAAuB,IAAjD,mBAAOM,EAAP,KAAcC,EAAd,KAGA,EAAwBP,mBAA2C,MAAnE,mBAAOQ,EAAP,KAAaC,EAAb,KA6DA,OA3DAC,qBAAU,WAGR,IAAIC,EAAiBlB,EACjBK,IAEFa,EAAiBA,EAAeC,QAAO,SAAAxD,GAAM,OAAIA,EAAOyD,MAAQf,MAE9DC,IAEFY,EAAiBA,EAAeC,QAAO,SAAAxD,GAAM,OAAIA,EAAOyD,MAAQd,MAElEY,EAAiBA,EAEdC,QAAO,SAAAxD,GAAM,OAAIyC,EAAUiB,IAAI1D,EAAOI,YACzC,IAAMuD,EAAgBC,kBAAQL,GAAgB,SAACvD,GAG7C,IAAM6D,EAAS,GAkBf,OAhBI7D,EAAO8D,QAAUP,EAAeQ,MAAK,SAAAC,GAAC,OAAEA,EAAE7D,MAAQH,EAAO8D,WAE3DD,EAAOI,KAAK,CACVnC,OAAQ9B,EAAOG,KACf8B,OAAQjC,EAAO8D,SAKf9D,EAAOkE,QAAUX,EAAeQ,MAAK,SAAAC,GAAC,OAAEA,EAAE7D,MAAQH,EAAOkE,WAC3DL,EAAOI,KAAK,CACVnC,OAAQ9B,EAAOG,KACf8B,OAAQjC,EAAOkE,SAIZL,KAITd,EAAWC,MAAMO,GACjBR,EACGoB,MAAM,SAAUC,cAAgBC,UAAU,MAC1CF,MAAM,OAAQG,YAA8BX,GAAenD,IAAG,SAAC+D,GAAD,OAAOA,EAAEpE,QAAMkE,SAAS,KACtFF,MAAM,MD1HN,SAAqBlD,GAAoE,IAC1F+B,EACAwB,EACAC,EAHsCJ,EAAmD,uDAAhC,GAKvDF,EAAQ,SAACO,GACb1B,EAAM2B,SAAQ,SAACC,GAEb,IAEMC,GAFcD,EAAKnB,KAAOe,IAAiBC,EAAaD,GAEhCvD,EAE9B2D,EAAKE,KAAQD,EAAWD,EAAKrE,GAAMmE,EAAQL,MAgB/C,OAZAF,EAAMY,WAAa,SAACC,GAClBhC,EAAQgC,EAERR,EAAeS,KAAKC,IAAL,MAAAD,KAAI,YAAQjC,EAAMmC,KAAI,SAACP,GAAD,OAAUA,EAAKnB,UAAS,IAE7DgB,EAAaQ,KAAKG,IAAL,MAAAH,KAAI,YAAQjC,EAAMmC,KAAI,SAACP,GAAD,OAAUA,EAAKnB,UAAS,KAG7DU,EAAME,SAAW,SAACgB,GAChBhB,EAAWgB,GAGNlB,EC8FWmB,CAAYrE,EAAQ,IACjCkD,MAAM,oBAAqBoB,YAAO/C,EAAQ,GAAG6B,SAAS,MACzDtB,EAAWyC,YAAY,GAAKC,UAG5BxC,EAASM,GACTJ,EAASQ,KACR,CAAClB,IAGJM,EAAW2C,GAAG,QAAQ,WACpBzC,EAAS,YAAID,IACbG,EAAS,YAAID,OAIb,sBACEV,MAAOA,EACPvB,OAAQA,EACR0E,MAAO,CACLC,OAAQ,mBAEVC,QAAO,cAASrD,EAAT,YAAkBvB,GACzB6E,YAAa,SAACC,GACZ,GAAI3C,EAAM,CACR,kBAAmCA,EAAnC,GAAO4C,EAAP,KAAgBC,EAAhB,KAAyBjG,EAAzB,KACFA,EAAOkG,GAAMH,EAAEI,QAAUH,EACzBhG,EAAOoG,GAAML,EAAEM,QAAUJ,IAG3BK,UAAW,WACT,GAAIlD,EAAM,CACR,IAAWpD,EAAX,YAAqBoD,EAArB,MACApD,EAAOkG,GAAKlG,EAAOoG,GAAK,KACxB/C,EAAQ,MACRN,EAAWyC,YAAY,KAG3Be,aAAc,WACZ,GAAInD,EAAM,CACR,IAAWpD,EAAX,YAAqBoD,EAArB,MACApD,EAAOkG,GAAKlG,EAAOoG,GAAK,KACxB/C,EAAQ,MACRN,EAAWyC,YAAY,KA3B7B,UA+BE,4BACGtC,EAAMiC,KAAI,SAACvD,GAAD,OACX,8BACE,cAACD,EAAD,CAAeC,KAAMA,IADvB,qBAAiBA,EAAKE,OAAkB3B,KAAxC,YAAiDyB,EAAKK,OAAkB9B,YAI1E,4BACG6C,EAAMmC,KAAI,SAACP,GAAD,OACT,mBACE4B,YAAa,SAACT,GACZ1C,EAAQ,CAACuB,EAAKtE,EAAKyF,EAAEI,QAASvB,EAAKrE,EAAKwF,EAAEM,QAASzB,IACnD7B,EAAWyC,YAAY,IAAKC,WAE9BgB,OAAO,OALT,SAQE,cAAC1G,EAAD,CAAWC,OAAQ4E,EAAM3E,OAAQA,EAAQC,YAAaoC,EAAQjC,SARhE,UAMUuE,EAAKzE,KANf,mB,wBC7LK,SAASuG,IACtB,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACF,EAAA,EAAOG,MAAR,CAAchG,KAAK,cAAnB,wBACA,eAAC6F,EAAA,EAAOI,KAAR,eAAeC,UAEjB,eAACH,EAAA,EAAD,WACE,cAACA,EAAA,EAAII,KAAL,CAAUnG,KAAMoG,IAAhB,oBACA,cAACL,EAAA,EAAII,KAAL,CAAUnG,KAAMC,eAAKmG,IAAY,cAAjC,2BACA,cAACL,EAAA,EAAII,KAAL,CAAUnG,KAAMC,eAAKmG,IAAY,6BAAjC,qC,2CCMV,SAASC,EAAT,GAI0B,IAHxBC,EAGuB,EAHvBA,YACAC,EAEuB,EAFvBA,kBACAC,EACuB,EADvBA,qBAEA,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAKC,MAAN,wBACCL,EAAYjC,KAAI,SAAA/E,GAAO,OAEtB,aADA,CACCoH,EAAA,EAAKE,MAAN,CACEC,KAAK,WAELnH,GAAE,UAAKJ,EAAL,YACFwH,MAAOxH,EACPyH,QAASR,EAAkB3D,IAAItD,GAC/B0H,SAAU,WACJT,EAAkB3D,IAAItD,GACxBiH,EAAkBU,OAAO3H,GAEzBiH,EAAkBW,IAAI5H,GAExBkH,EAAqB,IAAIW,IAAIZ,MAZjC,UAEUjH,EAFV,mBA0BR,SAAS8H,EAAT,GAKiB,IAJfxF,EAIc,EAJdA,OACAC,EAGc,EAHdA,MACAwF,EAEc,EAFdA,UACAC,EACc,EADdA,SAEA,OACE,eAACb,EAAA,EAAD,WACE,cAACC,EAAA,EAAKC,MAAN,oBACA,eAACY,EAAA,EAAD,WACE,cAACb,EAAA,EAAKC,MAAN,oBACA,eAACa,EAAA,EAAD,CAAYC,eAAa,EAAzB,UACE,cAACf,EAAA,EAAKgB,QAAN,CACEb,KAAK,SACLc,MAAO9F,EACPmF,SAAU,SAAAY,GAAK,OAAIN,EACjBM,EAAMzG,OAAOwG,MACbE,OAAOD,EAAMzG,OAAOwG,YAASG,MAGjC,cAACN,EAAA,EAAWvB,KAAZ,uBAGJ,eAACsB,EAAA,EAAD,WACE,cAACb,EAAA,EAAKC,MAAN,qBACA,eAACa,EAAA,EAAD,CAAYC,eAAa,EAAzB,UACE,cAACf,EAAA,EAAKgB,QAAN,CACEb,KAAK,SACLc,MAAO/F,EACPoF,SAAU,SAAAY,GAAK,OAAIP,EACjBO,EAAMzG,OAAOwG,MACbE,OAAOD,EAAMzG,OAAOwG,YAASG,MAGjC,cAACN,EAAA,EAAWvB,KAAZ,0BAsDK8B,MA/Cf,YAAsF,IAAtDxG,EAAqD,EAA7DD,KAAQC,OAAUE,EAA2C,EAA3CA,OAAQuG,EAAmC,EAAnCA,aAE1C1B,EAAc3G,mBAAQ,kBAC1BsI,eAAK1G,EAAO8C,KAAI,SAAAnF,GAAM,OAAIA,EAAOI,YAAU4I,SAC3C,CAAC3G,IAGH,EAAkDO,mBAASL,EAAOE,WAAlE,mBAAO4E,EAAP,KAA0BC,EAA1B,KACA,EAA4B1E,mBAASL,EAAOG,QAA5C,mBAAOA,EAAP,KAAeyF,EAAf,KACA,EAA0BvF,mBAASL,EAAOI,OAA1C,mBAAOA,EAAP,KAAcyF,EAAd,KAEA,OACE,mCACE,eAACb,EAAA,EAAD,WACE,cAACc,EAAA,EAAD,UACE,cAAClB,EAAD,CACEC,YAAaA,EACbC,kBAAmBA,EACnBC,qBAAsBA,MAG1B,cAACe,EAAA,EAAD,UACE,cAACH,EAAD,CACExF,OAAQA,EACRC,MAAOA,EACPwF,UAAWA,EACXC,SAAUA,MAGd,cAACa,EAAA,EAAD,CACEC,QAAQ,UACRvB,KAAK,SACLwB,QAAS,kBAEPL,EAAa,2BACRvG,GADO,IAEVE,UAAW4E,EACX3E,OAAQA,EACRC,MAAOA,MATb,yB,gBCpHFyG,EAAwB,CAC5B5G,MAAO,IACPvB,OAAQ,IACRhB,OAAQ,GACRwC,UAAW,IAAIwF,IAAI,CACjB,iBACA,QACA,kBAEFvF,OAAQ,KACRC,MAAO,MAwCM0G,MArCf,WACE,MAA4BzG,mBAASwG,GAArC,mBAAO7G,EAAP,KAAe+G,EAAf,KAEA,OACE,eAAC,IAAD,CAAeC,SAAUvI,cAAzB,UACE,cAAC0F,EAAD,IACA,eAACE,EAAA,EAAD,WACE,cAACW,EAAA,EAAD,UACE,yBAEA,eAAC,IAAD,CAAOiC,UAAW,kBJkBrB,SAAP,kCIlBkCC,CAAU1I,eAAKC,cAAwB,cAA/D,UACE,cAAC,IAAM0I,UAAP,UACG,SAACtH,GAAD,OACD,qCACE,cAACmF,EAAA,EAAD,UACE,cAACoC,EAAA,EAAD,CAAWhE,MAAO,CAACiE,aAAc,OAAQC,iBAAiB,IAA1D,SACE,eAACF,EAAA,EAAUG,KAAX,CAAgBC,SAAS,IAAzB,UACE,cAACJ,EAAA,EAAUK,OAAX,sBACA,cAACL,EAAA,EAAUM,KAAX,UACE,cAAC,EAAD,CAAc7H,KAAMA,EAAMG,OAAQA,EAAQuG,aAAcQ,aAKhE,cAAC/B,EAAA,EAAD,UACE,cAAC,EAAD,CAAMnF,KAAMA,EAAMG,OAAQA,YAKhC,cAAC,IAAM2H,QAAP,wCCrDZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.19f65a59.chunk.js","sourcesContent":["/*\n * This file houses miscellaneous utility functions\n * Over time, as more functions are added, natural classifications of these functions should\n * arrive and they should be decomposed into more specific files.\n */\n\nimport { Force } from 'd3';\nimport { load } from 'js-yaml';\nimport { Person, PersonLink, DataSchema } from './types';\n\n/**\n * This is a force that causes nodes to gravitate toward the correct time\n * When affected by this force, a Person 'falls' toward the height that (proportionally)\n * represents the year of their birth\n * @param {number} height - the height of the viewBox\n * @param {strength} strength - the strength of the force\n * @return {Force<Person, PersonLink>} a force that causes each person to be attracted\n * along the y-axis toward the year of their birth\n */\nexport function ageOrdering(height: number, strength: number = 0.1): Force<Person, PersonLink> {\n  let nodes: Person[];\n  let earliestYear: number;\n  let latestYear: number;\n\n  const force = (alpha: number) => {\n    nodes.forEach((node) => {\n      // How far along the y-axis the node should be, on a scale of 0-1\n      const proportion = (node.born - earliestYear) / (latestYear - earliestYear);\n      // Now scale that proportion to an absolute position based on height\n      const position = proportion * height;\n      // Now, set the velocity toward the position, based on current position, alpha, and strength\n      node.vy! += (position - node.y!) * alpha * strength;\n    });\n  };\n\n  force.initialize = (inputNodes: Person[]) => {\n    nodes = inputNodes;\n    // The earliest year is the earliest birth date of a monarch, with 100 years' padding\n    earliestYear = Math.min(...nodes.map((node) => node.born)) - 100;\n    // The latest year is the latest birth date of a monarch, with 100 years' padding\n    latestYear = Math.max(...nodes.map((node) => node.born)) + 100;\n  };\n\n  force.strength = (newVal: number) => {\n    strength = newVal;\n  };\n\n  return force;\n}\n\n/**\n * An async function that fetches and returns data for the simulation\n * @param {string} url - the url from which to fetch the data\n * @return {Promise<DataSchema>} - the data\n */\nexport async function fetchData(url: string): Promise<DataSchema> {\n  const response = await fetch(url);\n  const text = await response.text();\n  return await load(text) as DataSchema;\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport {\n  forceSimulation,\n  forceLink,\n  forceManyBody,\n  forceX\n} from 'd3-force';\nimport { flatMap } from 'lodash';\nimport {\n  Person, PersonLink, Reign, Color, Config, DataSchema\n} from '../utils/types';\nimport { ageOrdering } from '../utils/util';\nimport { join } from 'path';\n\ninterface PersonSVGProps {\n  person: Person;\n  radius: number;\n  reignColors: Record<Reign, Color>;\n}\nfunction PersonSVG({ person, radius, reignColors }: PersonSVGProps) {\n  const {\n    name, country, reign, x, y\n  } = person;\n  const id = useMemo(() => name.replaceAll(/\\s+/g, '_'), []);\n\n  return (\n    <g>\n      <clipPath id={`${id}-mask`}>\n        <circle r={radius} cx={x!} cy={y!} />\n      </clipPath>\n      <image\n        key={id}\n        href={join(process.env.PUBLIC_URL, `flags/${country}.svg`)}\n        x={x! - 2 * radius}\n        y={y! - radius}\n        height={radius * 2}\n        clipPath={`url(#${id}-mask)`}\n      />\n      <circle\n        r={radius}\n        cx={x!}\n        cy={y!}\n        stroke={reign ? reignColors[reign] : reignColors.none}\n        strokeWidth='4px'\n        fillOpacity='0'\n        id={id}\n      />\n      <text\n        x={x}\n        y={y! - (1.2 * radius)}\n        textAnchor='middle'\n        stroke='#fff'\n        strokeWidth='0.5'\n        strokeOpacity='0.6'\n        fill='#000'\n        fontSize='16px'\n      >\n        {name}\n      </text>\n    </g>\n  );\n}\n\ninterface PersonLinkSVGProps {\n  link: PersonLink;\n}\nfunction PersonLinkSVG({ link }: PersonLinkSVGProps) {\n  return (\n    <line\n      x1={(link.source as Person).x}\n      y1={(link.source as Person).y}\n      x2={(link.target as Person).x}\n      y2={(link.target as Person).y}\n      stroke='#999'\n      strokeOpacity='0.6'\n      strokeWidth='10'\n    />\n  );\n}\n\ninterface TreeProps {\n  // TODO have this be nodes instead\n  data: DataSchema;\n  config: Config;\n}\nfunction Tree({\n  data: { people, colors },\n  config: { width, height, radius, countries, before, since }\n}: TreeProps) {\n  const [simulation] = useState(forceSimulation<Person>().stop());\n  // Have nodes and links be state variables so we can update them\n  const [nodes, setNodes] = useState<Person[]>([]);\n  const [links, setLinks] = useState<PersonLink[]>([]);\n\n  // The drag state is two offsets and the person being dragged, or null\n  const [drag, setDrag] = useState<[number, number, Person] | null >(null);\n\n  useEffect(() => {\n    // We only make selectedPeople mutable because we will re-set it several times in the\n    // subsequent wave of filters\n    let selectedPeople = people;\n    if (before) {\n      // If before is defined, only include people born up to (and including) the date\n      selectedPeople = selectedPeople.filter(person => person.born <= before);\n    }\n    if (since) {\n      // If since is defined, only include people born since the date\n      selectedPeople = selectedPeople.filter(person => person.born >= since);\n    }\n    selectedPeople = selectedPeople\n      // Include the selected countries\n      .filter(person => countries.has(person.country));\n    const computedLinks = flatMap(selectedPeople, (person: Person) => {\n      // Initialize links as familial connections\n      // TODO other kinds of links, such as succession\n      const result = [];\n      // If the person has a defined mother and that mother can be found in selectedPeople...\n      if (person.mother && selectedPeople.find(p=>p.name == person.mother)) {\n        // Add a link between that person and their mother\n        result.push({\n          source: person.name,\n          target: person.mother\n        });\n      }\n\n      // And do the same with father\n      if (person.father && selectedPeople.find(p=>p.name == person.father)) {\n        result.push({\n          source: person.name,\n          target: person.father\n        });\n      }\n\n      return result;\n    });\n\n    // One-time initialization: add simulation nodes and forces\n    simulation.nodes(selectedPeople);\n    simulation\n      .force('charge', forceManyBody().strength(-2000))\n      .force('link', forceLink<Person, PersonLink>(computedLinks).id((d) => d.name).strength(0.2))\n      .force('age', ageOrdering(height, 1))\n      .force('horizontal-center', forceX(width / 2).strength(0.25));\n    simulation.alphaTarget(0.0).restart();\n\n    // Set the initial nodes and links\n    setNodes(selectedPeople);\n    setLinks(computedLinks);\n  }, [countries]);\n\n  // On every simulation step, write nodes and links again\n  simulation.on('tick', () => {\n    setNodes([...nodes]);\n    setLinks([...links]);\n  });\n\n  return (\n    <svg\n      width={width}\n      height={height}\n      style={{\n        border: '1px solid black'\n      }}\n      viewBox={`0 0 ${width} ${height}`}\n      onMouseMove={(e) => {\n        if (drag) {\n          const [offsetX, offsetY, person] = drag;\n        person.fx! = e.clientX + offsetX;\n        person.fy! = e.clientY + offsetY;\n        }\n      }}\n      onMouseUp={() => {\n        if (drag) {\n          const [, , person] = drag;\n          person.fx = person.fy = null;\n          setDrag(null);\n          simulation.alphaTarget(0);\n        }\n      }}\n      onMouseLeave={() => {\n        if (drag) {\n          const [, , person] = drag;\n          person.fx = person.fy = null;\n          setDrag(null);\n          simulation.alphaTarget(0);\n        }\n      }}\n    >\n      <g>\n        {links.map((link) =>\n        <g key={`link-${(link.source as Person).name}-${(link.target as Person).name}`}>\n          <PersonLinkSVG link={link} />)\n        </g>)}\n      </g>\n      <g>\n        {nodes.map((node) => (\n          <g\n            onMouseDown={(e) => {\n              setDrag([node.x! - e.clientX, node.y! - e.clientY, node]);\n              simulation.alphaTarget(0.3).restart();\n            }}\n            cursor='move'\n            key={`${node.name}-node`}\n          >\n            <PersonSVG person={node} radius={radius} reignColors={colors!.reign} />\n          </g>\n        ))}\n      </g>\n    </svg>\n  );\n}\n\nexport default Tree;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport { repository, version } from '../../package.json';\nimport { join } from 'path';\n\nexport default function Navigation() {\n  return (\n    <Navbar>\n      <Container>\n        <Nav>\n          <Navbar.Brand href='/hereditary'>Hereditary</Navbar.Brand>\n          <Navbar.Text>v{version}</Navbar.Text>\n        </Nav>\n        <Nav>\n          <Nav.Link href={repository}>GitHub</Nav.Link>\n          <Nav.Link href={join(repository, 'issues/new')}>File an Issue</Nav.Link>\n          <Nav.Link href={join(repository, 'edit/main/public/data.yml')}>Contribute Data</Nav.Link>\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n}\n","import React, { useMemo, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { DataSchema, Config, Country } from '../utils/types';\nimport { uniq } from 'lodash';\nimport { join } from 'path';\n\ninterface ConfigEditorProps {\n  data: DataSchema;\n  config: Config;\n  submitConfig: (config: Config) => void;\n}\n\ninterface CountriesEditorProps {\n  // The list of all countries in the dataset\n  countryList: Country[];\n  // The set of selected countries\n  selectedCountries: Set<Country>;\n  // The selectedCountires setter function\n  setSelectedCountries: (countries: Set<Country>) => void;\n}\nfunction CountriesEditor({\n  countryList,\n  selectedCountries,\n  setSelectedCountries\n}: CountriesEditorProps) {\n  return (\n    <Row>\n      <Form.Label>Countries</Form.Label>\n      {countryList.map(country =>\n        // For each country, show a checkbox for whether that country is included or not\n        <Form.Check\n          type='checkbox'\n          key={`${country}-enabled`}\n          id={`${country}-enabled`}\n          label={country}\n          checked={selectedCountries.has(country)}\n          onChange={() => {\n            if (selectedCountries.has(country)) {\n              selectedCountries.delete(country);\n            } else {\n              selectedCountries.add(country);\n            }\n            setSelectedCountries(new Set(selectedCountries));\n          }}\n        />\n      )}\n    </Row>\n  )\n}\n\ninterface DatesEditor {\n  before: number | undefined;\n  since: number | undefined;\n  setBefore: (before: number | undefined) => void;\n  setSince: (since: number | undefined) => void;\n}\nfunction DatesEditor({\n  before,\n  since,\n  setBefore,\n  setSince\n}: DatesEditor) {\n  return (\n    <Row>\n      <Form.Label>Dates</Form.Label>\n      <Col>\n        <Form.Label>Since</Form.Label>\n        <InputGroup hasValidation>\n          <Form.Control\n            type='number'\n            value={since}\n            onChange={event => setSince(\n              event.target.value ?\n              Number(event.target.value) : undefined\n            )}\n          />\n          <InputGroup.Text>CE</InputGroup.Text>\n        </InputGroup>\n      </Col>\n      <Col>\n        <Form.Label>Before</Form.Label>\n        <InputGroup hasValidation>\n          <Form.Control\n            type='number'\n            value={before}\n            onChange={event => setBefore(\n              event.target.value ?\n              Number(event.target.value) : undefined\n            )}\n          />\n          <InputGroup.Text>CE</InputGroup.Text>\n        </InputGroup>\n      </Col>\n    </Row>\n  );\n}\n\nfunction ConfigEditor({ data: { people }, config, submitConfig }: ConfigEditorProps) {\n  // The list of all countries, derived from the data\n  const countryList = useMemo(() =>\n    uniq(people.map(person => person.country)).sort(),\n    [people]);\n\n  // The config, as currently maintained inside this form\n  const [selectedCountries, setSelectedCountries] = useState(config.countries);\n  const [before, setBefore] = useState(config.before);\n  const [since, setSince] = useState(config.since);\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <CountriesEditor\n            countryList={countryList}\n            selectedCountries={selectedCountries}\n            setSelectedCountries={setSelectedCountries}\n          />\n        </Col>\n        <Col>\n          <DatesEditor\n            before={before}\n            since={since}\n            setBefore={setBefore}\n            setSince={setSince}\n          />\n        </Col>\n        <Button\n          variant='primary'\n          type='submit'\n          onClick={() =>\n            // Then submit the configuration based on current form state\n            submitConfig({\n              ...config,\n              countries: selectedCountries,\n              before: before,\n              since: since\n            })\n          }\n        >Apply</Button>\n      </Row>\n    </>\n  );\n}\n\nexport default ConfigEditor;\n","import React, { useState } from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tree from './Tree';\nimport Navigation from './Navigation';\nimport ConfigEditor from './ConfigEditor';\nimport { Async } from 'react-async';\nimport { fetchData } from '../utils/util';\nimport { DataSchema, Config } from '../utils/types';\nimport { join } from 'path';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst defaultConfig: Config = {\n  width: 800,\n  height: 800,\n  radius: 30,\n  countries: new Set([\n    'United Kingdom',\n    'Spain',\n    'German Empire'\n  ]),\n  before: 1985,\n  since: 1800\n}\n\nfunction App() {\n  const [config, setConfig] = useState(defaultConfig);\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Navigation />\n      <Container>\n        <Row>\n          <hr />\n        </Row>\n          <Async promiseFn={() => fetchData(join(process.env.PUBLIC_URL, 'data.yml'))} >\n            <Async.Fulfilled>\n              {(data: DataSchema) =>\n              <>\n                <Row>\n                  <Accordion style={{marginBottom: '5px'}} defaultActiveKey='0'>\n                    <Accordion.Item eventKey='0'>\n                      <Accordion.Header>Options</Accordion.Header>\n                      <Accordion.Body>\n                        <ConfigEditor data={data} config={config} submitConfig={setConfig} />\n                      </Accordion.Body>\n                    </Accordion.Item>\n                  </Accordion>\n                </Row>\n                <Row>\n                  <Tree data={data} config={config} />\n                </Row>\n              </>\n              }\n            </Async.Fulfilled>\n            <Async.Loading>Loading data...</Async.Loading>\n          </Async>\n      </Container>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}